"""
Test attempt_completion action integration
"""
import sys
from pathlib import Path

# Add the parent directory to sys.path to enable imports
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))
sys.path.insert(0, str(backend_dir / "api_server"))

def test_attempt_completion_handler():
    """Test that the attempt_completion handler works correctly"""
    
    print("=" * 60)
    print("TESTING ATTEMPT_COMPLETION ACTION HANDLER")
    print("=" * 60)
    
    try:
        # Import the handler function
        from api_server.index_fixed_azure_hybrid import _handle_attempt_completion_interrupt
        from shared_models import GroqAgentState
        
        print("‚úÖ Successfully imported attempt_completion handler")
        
        # Create a mock GroqAgentState
        mock_state = GroqAgentState(api_key="test", project_id="test-completion")
        
        # Test case 1: Basic completion with message
        print("\nüß™ Test 1: Basic completion with message")
        action1 = {
            'type': 'attempt_completion',
            'content': 'I have successfully completed the todo app with user authentication. The app includes:\n- User signup and login\n- Protected routes\n- CRUD operations for todos\n- Clean UI design\n\nAll features are working correctly and integrated.'
        }
        
        result1 = _handle_attempt_completion_interrupt(mock_state, action1, "Test accumulated content")
        
        if result1 and result1.get('success'):
            print("‚úÖ Test 1 PASSED")
            print(f"   Message: {result1.get('message')[:100]}...")
            print(f"   Session ended: {result1.get('session_ended')}")
        else:
            print("‚ùå Test 1 FAILED")
            print(f"   Result: {result1}")
        
        # Test case 2: Empty message (should use default)
        print("\nüß™ Test 2: Empty message (default fallback)")
        action2 = {
            'type': 'attempt_completion',
            'content': ''
        }
        
        result2 = _handle_attempt_completion_interrupt(mock_state, action2, "Test content")
        
        if result2 and result2.get('success') and result2.get('message') == 'Task completed successfully.':
            print("‚úÖ Test 2 PASSED")
            print(f"   Default message: {result2.get('message')}")
        else:
            print("‚ùå Test 2 FAILED")
            print(f"   Result: {result2}")
        
        # Test case 3: Test XML parsing pattern
        print("\nüß™ Test 3: XML action tag pattern")
        xml_content = """
        I have completed the weather app with the following features:
        - API key input for users
        - Real-time weather data fetching
        - Clean responsive UI
        - Error handling for invalid cities
        
        <action type="attempt_completion">
        Weather app completed successfully! The app now allows users to:
        
        ‚úÖ Enter their own OpenWeatherMap API key
        ‚úÖ Search for weather by city name  
        ‚úÖ View current weather conditions with icons
        ‚úÖ Handle errors gracefully (invalid cities, API issues)
        ‚úÖ Responsive design that works on mobile and desktop
        
        The app is fully functional and ready for use. Users just need to sign up for a free OpenWeatherMap API key and enter it in the app.
        </action>
        """
        
        # Simulate parsing XML content (simplified for test)
        import re
        pattern = r'<action type="attempt_completion">(.*?)</action>'
        match = re.search(pattern, xml_content.strip(), re.DOTALL)
        
        if match:
            extracted_content = match.group(1).strip()
            action3 = {
                'type': 'attempt_completion',
                'content': extracted_content
            }
            
            result3 = _handle_attempt_completion_interrupt(mock_state, action3, xml_content)
            
            if result3 and result3.get('success'):
                print("‚úÖ Test 3 PASSED")
                print(f"   Extracted message length: {len(result3.get('message', ''))}")
                print(f"   Contains checklist: {'‚úÖ' in result3.get('message', '')}")
            else:
                print("‚ùå Test 3 FAILED")
                print(f"   Result: {result3}")
        else:
            print("‚ùå Test 3 FAILED: Could not extract XML content")
        
        print(f"\n" + "=" * 60)
        print("‚úÖ ATTEMPT_COMPLETION HANDLER TESTS COMPLETE")
        print("=" * 60)
        
    except ImportError as e:
        print(f"‚ùå Import Error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Test Error: {e}")
        return False
    
    return True

def test_prompt_integration():
    """Test that the action is properly added to the prompt"""
    
    print("\n" + "=" * 60)
    print("TESTING PROMPT INTEGRATION")
    print("=" * 60)
    
    try:
        # Import the prompts module
        from coder.prompts import get_prompt_config
        
        # Check if attempt_completion is in the prompt
        prompt_text = get_prompt_config("test-project", [], {})
        
        if 'attempt_completion' in prompt_text:
            print("‚úÖ attempt_completion found in prompt")
            
            # Check for the XML example
            if '<action type="attempt_completion">' in prompt_text:
                print("‚úÖ XML example found in prompt")
            else:
                print("‚ö†Ô∏è  XML example not found in prompt")
            
            # Check for usage guidelines
            if 'Use when you have completed all the work' in prompt_text:
                print("‚úÖ Usage guidelines found in prompt")
            else:
                print("‚ö†Ô∏è  Usage guidelines not found in prompt")
                
        else:
            print("‚ùå attempt_completion NOT found in prompt")
        
    except Exception as e:
        print(f"‚ùå Prompt test error: {e}")

if __name__ == "__main__":
    print("üöÄ Starting attempt_completion action tests...")
    
    # Test the handler function
    handler_success = test_attempt_completion_handler()
    
    # Test prompt integration
    test_prompt_integration()
    
    if handler_success:
        print("\nüéâ ALL TESTS PASSED - attempt_completion action is working!")
    else:
        print("\nüí• SOME TESTS FAILED - check implementation")