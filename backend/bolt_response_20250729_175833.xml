<boltArtifact id="analytics-dashboard" title="Modern Analytics Dashboard">
<boltAction type="file" filePath="package.json">
{
  "name": "analytics-dashboard",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "recharts": "^2.8.0",
    "lucide-react": "^0.263.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.27",
    "tailwindcss": "^3.3.3",
    "typescript": "^5.0.2",
    "vite": "^4.4.5"
  }
}
</boltAction>
<boltAction type="shell">npm install</boltAction>
<boltAction type="shell">npm install -D tailwindcss postcss autoprefixer</boltAction>
<boltAction type="shell">npx tailwindcss init -p</boltAction>
<boltAction type="file" filePath="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
</boltAction>
<boltAction type="file" filePath="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

body {
  font-family: 'Inter', sans-serif;
}

.gradient-bg {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.card-shadow {
  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

.hover-scale {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.hover-scale:hover {
  transform: translateY(-2px);
  box-shadow: 0 20px 40px -10px rgba(0, 0, 0, 0.15);
}
</boltAction>
<boltAction type="file" filePath="src/data/mockData.ts">
export interface RevenueData {
  month: string;
  revenue: number;
  profit: number;
}

export interface UserData {
  name: string;
  value: number;
}

export interface SalesData {
  day: string;
  sales: number;
  orders: number;
}

export interface MetricCard {
  title: string;
  value: string;
  change: string;
  trend: 'up' | 'down';
  icon: string;
}

export const revenueData: RevenueData[] = [
  { month: 'Jan', revenue: 45000, profit: 12000 },
  { month: 'Feb', revenue: 52000, profit: 15000 },
  { month: 'Mar', revenue: 48000, profit: 13500 },
  { month: 'Apr', revenue: 61000, profit: 18000 },
  { month: 'May', revenue: 55000, profit: 16000 },
  { month: 'Jun', revenue: 67000, profit: 21000 },
  { month: 'Jul', revenue: 72000, profit: 23000 },
  { month: 'Aug', revenue: 69000, profit: 22000 },
  { month: 'Sep', revenue: 75000, profit: 25000 },
  { month: 'Oct', revenue: 78000, profit: 26000 },
  { month: 'Nov', revenue: 82000, profit: 28000 },
  { month: 'Dec', revenue: 91000, profit: 32000 },
];

export const userData: UserData[] = [
  { name: 'Desktop', value: 45 },
  { name: 'Mobile', value: 35 },
  { name: 'Tablet', value: 20 },
];

export const salesData: SalesData[] = [
  { day: 'Mon', sales: 2400, orders: 320 },
  { day: 'Tue', sales: 1398, orders: 280 },
  { day: 'Wed', sales: 9800, orders: 420 },
  { day: 'Thu', sales: 3908, orders: 350 },
  { day: 'Fri', sales: 4800, orders: 480 },
  { day: 'Sat', sales: 3800, orders: 390 },
  { day: 'Sun', sales: 4300, orders: 410 },
];

export const metrics: MetricCard[] = [
  {
    title: 'Total Revenue',
    value: '$752,890',
    change: '+12.5%',
    trend: 'up',
    icon: 'dollar'
  },
  {
    title: 'Active Users',
    value: '8,549',
    change: '+23.1%',
    trend: 'up',
    icon: 'users'
  },
  {
    title: 'Total Sales',
    value: '2,456',
    change: '-5.4%',
    trend: 'down',
    icon: 'shopping-cart'
  },
  {
    title: 'Conversion Rate',
    value: '3.24%',
    change: '+1.2%',
    trend: 'up',
    icon: 'trending-up'
  }
];
</boltAction>
<boltAction type="file" filePath="src/components/MetricCard.tsx">
import React from 'react';
import { TrendingUp, TrendingDown, Users, ShoppingCart, DollarSign, BarChart3 } from 'lucide-react';
import { MetricCard as MetricCardType } from '../data/mockData';

const iconMap = {
  users: Users,
  'shopping-cart': ShoppingCart,
  dollar: DollarSign,
  'trending-up': BarChart3,
};

interface MetricCardProps {
  data: MetricCardType;
}

export const MetricCard: React.FC<MetricCardProps> = ({ data }) => {
  const IconComponent = iconMap[data.icon as keyof typeof iconMap] || BarChart3;

  return (
    <div className="bg-white rounded-xl p-6 card-shadow hover-scale">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600">{data.title}</p>
          <p className="text-2xl font-bold text-gray-900 mt-1">{data.value}</p>
          <div className="flex items-center mt-2">
            {data.trend === 'up' ? (
              <TrendingUp className="w-4 h-4 text-green-500 mr-1" />
            ) : (
              <TrendingDown className="w-4 h-4 text-red-500 mr-1" />
            )}
            <span className={`text-sm font-medium ${
              data.trend === 'up' ? 'text-green-500' : 'text-red-500'
            }`}>
              {data.change}
            </span>
            <span className="text-sm text-gray-500 ml-1">vs last month</span>
          </div>
        </div>
        <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
          <IconComponent className="w-6 h-6 text-white" />
        </div>
      </div>
    </div>
  );
};
</boltAction>
<boltAction type="file" filePath="src/components/RevenueChart.tsx">
import React from 'react';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Area,
  AreaChart,
} from 'recharts';
import { RevenueData } from '../data/mockData';

interface RevenueChartProps {
  data: RevenueData[];
}

export const RevenueChart: React.FC<RevenueChartProps> = ({ data }) => {
  return (
    <div className="bg-white rounded-xl p-6 card-shadow">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">Revenue & Profit Trends</h3>
      <ResponsiveContainer width="100%" height={300}>
        <AreaChart data={data}>
          <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
          <XAxis
            dataKey="month"
            stroke="#6b7280"
            fontSize={12}
            tickLine={false}
            axisLine={false}
          />
          <YAxis
            stroke="#6b7280"
            fontSize={12}
            tickLine={false}
            axisLine={false}
            tickFormatter={(value) => `$${value / 1000}k`}
          />
          <Tooltip
            contentStyle={{
              backgroundColor: '#fff',
              border: '1px solid #e5e7eb',
              borderRadius: '8px',
              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
            }}
            formatter={(value: number) => [`$${value.toLocaleString()}`, '']}
          />
          <Area
            type="monotone"
            dataKey="revenue"
            stroke="#8b5cf6"
            fill="#8b5cf6"
            fillOpacity={0.1}
            strokeWidth={2}
            name="Revenue"
          />
          <Area
            type="monotone"
            dataKey="profit"
            stroke="#10b981"
            fill="#10b981"
            fillOpacity={0.1}
            strokeWidth={2}
            name="Profit"
          />
        </AreaChart>
      </ResponsiveContainer>
    </div>
  );
};
</boltAction>
<boltAction type="file" filePath="src/components/UserDistribution.tsx">
import React from 'react';
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from 'recharts';
import { UserData } from '../data/mockData';

interface UserDistributionProps {
  data: UserData[];
}

const COLORS = ['#8b5cf6', '#3b82f6', '#10b981'];

export const UserDistribution: React.FC<UserDistributionProps> = ({ data }) => {
  return (
    <div className="bg-white rounded-xl p-6 card-shadow">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">User Distribution</h3>
      <ResponsiveContainer width="100%" height={250}>
        <PieChart>
          <Pie
            data={data}
            cx="50%"
            cy="50%"
            innerRadius={60}
            outerRadius={80}
            paddingAngle={5}
            dataKey="value"
          >
            {data.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
            ))}
          </Pie>
          <Tooltip
            contentStyle={{
              backgroundColor: '#fff',
              border: '1px solid #e5e7eb',
              borderRadius: '8px',
              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
            }}
            formatter={(value: number) => [`${value}%`, '']}
          />
        </PieChart>
      </ResponsiveContainer>
      <div className="mt-4 space-y-2">
        {data.map((item, index) => (
          <div key={item.name} className="flex items-center justify-between">
            <div className="flex items-center">
              <div
                className="w-3 h-3 rounded-full mr-2"
                style={{ backgroundColor: COLORS[index] }}
              />
              <span className="text-sm text-gray-600">{item.name}</span>
            </div>
            <span className="text-sm font-medium text-gray-900">{item.value}%</span>
          </div>
        ))}
      </div>
    </div>
  );
};
</boltAction>
<boltAction type="file" filePath="src/components/SalesChart.tsx">
import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from 'recharts';
import { SalesData } from '../data/mockData';

interface SalesChartProps {
  data: SalesData[];
}

export const SalesChart: React.FC<SalesChartProps> = ({ data }) => {
  return (
    <div className="bg-white rounded-xl p-6 card-shadow">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">Weekly Sales</h3>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={data}>
          <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
          <XAxis
            dataKey="day"
            stroke="#6b7280"
            fontSize={12}
            tickLine={false}
            axisLine={false}
          />
          <YAxis
            stroke="#6b7280"
            fontSize={12}
            tickLine={false}
            axisLine={false}
            tickFormatter={(value) => `$${value / 1000}k`}
          />
          <Tooltip
            contentStyle={{
              backgroundColor: '#fff',
              border: '1px solid #e5e7eb',
              borderRadius: '8px',
              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
            }}
            formatter={(value: number, name: string) => [
              name === 'sales' ? `$${value.toLocaleString()}` : value.toLocaleString(),
              name === 'sales' ? 'Sales' : 'Orders'
            ]}
          />
          <Bar
            dataKey="sales"
            fill="#8b5cf6"
            radius={[8, 8, 0, 0]}
            name="sales"
          />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};
</boltAction>
<boltAction type="file" filePath="src/App.tsx">
import React from 'react';
import { MetricCard } from './components/MetricCard';
import { RevenueChart } from './components/RevenueChart';
import { UserDistribution } from './components/UserDistribution';
import { SalesChart } from './components/SalesChart';
import { metrics, revenueData, userData, salesData } from './data/mockData';

function App() {
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="gradient-bg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <h1 className="text-4xl font-bold text-white">Analytics Dashboard</h1>
            <p className="mt-2 text-lg text-purple-200">Track your business performance in real-time</p>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Metric Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {metrics.map((metric) => (
            <MetricCard key={metric.title} data={metric} />
          ))}
        </div>

        {/* Charts Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <RevenueChart data={revenueData} />
          </div>
          <div>
            <UserDistribution data={userData} />
          </div>
        </div>

        <div className="mt-6">
          <SalesChart data={salesData} />
        </div>

        {/* Footer */}
        <footer className="mt-12 text-center text-gray-600">
          <p>Last updated: {new Date().toLocaleString()}</p>
        </footer>
      </div>
    </div>
  );
}

export default App;
</boltAction>
<boltAction type="file" filePath="src/main.tsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
</boltAction>
<boltAction type="file" filePath="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Analytics Dashboard</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</boltAction>
<boltAction type="file" filePath="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})
</boltAction>
<boltAction type="file" filePath="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
</boltAction>
<boltAction type="file" filePath="tsconfig.node.json">
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}
</boltAction>
<boltAction type="file" filePath="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</boltAction>
<boltAction type="start">npm run dev</boltAction>
</boltArtifact>